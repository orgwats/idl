// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: service_market.proto

package market

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Market_NewCandleStream_FullMethodName = "/market.Market/NewCandleStream"
	Market_GetCandles_FullMethodName      = "/market.Market/GetCandles"
)

// MarketClient is the client API for Market service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MarketClient interface {
	NewCandleStream(ctx context.Context, in *NewCandleStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Candle], error)
	GetCandles(ctx context.Context, in *GetCandlesRequest, opts ...grpc.CallOption) (*GetCandlesResponse, error)
}

type marketClient struct {
	cc grpc.ClientConnInterface
}

func NewMarketClient(cc grpc.ClientConnInterface) MarketClient {
	return &marketClient{cc}
}

func (c *marketClient) NewCandleStream(ctx context.Context, in *NewCandleStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Candle], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Market_ServiceDesc.Streams[0], Market_NewCandleStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[NewCandleStreamRequest, Candle]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Market_NewCandleStreamClient = grpc.ServerStreamingClient[Candle]

func (c *marketClient) GetCandles(ctx context.Context, in *GetCandlesRequest, opts ...grpc.CallOption) (*GetCandlesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCandlesResponse)
	err := c.cc.Invoke(ctx, Market_GetCandles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MarketServer is the server API for Market service.
// All implementations must embed UnimplementedMarketServer
// for forward compatibility.
type MarketServer interface {
	NewCandleStream(*NewCandleStreamRequest, grpc.ServerStreamingServer[Candle]) error
	GetCandles(context.Context, *GetCandlesRequest) (*GetCandlesResponse, error)
	mustEmbedUnimplementedMarketServer()
}

// UnimplementedMarketServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMarketServer struct{}

func (UnimplementedMarketServer) NewCandleStream(*NewCandleStreamRequest, grpc.ServerStreamingServer[Candle]) error {
	return status.Errorf(codes.Unimplemented, "method NewCandleStream not implemented")
}
func (UnimplementedMarketServer) GetCandles(context.Context, *GetCandlesRequest) (*GetCandlesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCandles not implemented")
}
func (UnimplementedMarketServer) mustEmbedUnimplementedMarketServer() {}
func (UnimplementedMarketServer) testEmbeddedByValue()                {}

// UnsafeMarketServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MarketServer will
// result in compilation errors.
type UnsafeMarketServer interface {
	mustEmbedUnimplementedMarketServer()
}

func RegisterMarketServer(s grpc.ServiceRegistrar, srv MarketServer) {
	// If the following call pancis, it indicates UnimplementedMarketServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Market_ServiceDesc, srv)
}

func _Market_NewCandleStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NewCandleStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MarketServer).NewCandleStream(m, &grpc.GenericServerStream[NewCandleStreamRequest, Candle]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Market_NewCandleStreamServer = grpc.ServerStreamingServer[Candle]

func _Market_GetCandles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCandlesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).GetCandles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Market_GetCandles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).GetCandles(ctx, req.(*GetCandlesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Market_ServiceDesc is the grpc.ServiceDesc for Market service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Market_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "market.Market",
	HandlerType: (*MarketServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCandles",
			Handler:    _Market_GetCandles_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "NewCandleStream",
			Handler:       _Market_NewCandleStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service_market.proto",
}
