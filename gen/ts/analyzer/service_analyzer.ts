// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: service_analyzer.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { StartAnalyzerRequest, StartAnalyzerResponse } from "./rpc_start";
import { StopAnalyzerRequest, StopAnalyzerResponse } from "./rpc_stop";

export const protobufPackage = "analyzer";

export const ANALYZER_PACKAGE_NAME = "analyzer";

export interface AnalyzerClient {
  start(request: StartAnalyzerRequest): Observable<StartAnalyzerResponse>;

  stop(request: StopAnalyzerRequest): Observable<StopAnalyzerResponse>;
}

export interface AnalyzerController {
  start(
    request: StartAnalyzerRequest,
  ): Promise<StartAnalyzerResponse> | Observable<StartAnalyzerResponse> | StartAnalyzerResponse;

  stop(
    request: StopAnalyzerRequest,
  ): Promise<StopAnalyzerResponse> | Observable<StopAnalyzerResponse> | StopAnalyzerResponse;
}

export function AnalyzerControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["start", "stop"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("Analyzer", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("Analyzer", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const ANALYZER_SERVICE_NAME = "Analyzer";
