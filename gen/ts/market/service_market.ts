// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: service_market.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { Candle } from "./candle";
import { GetCandlesRequest, GetCandlesResponse } from "./rpc_get_candles";
import { NewCandleStreamRequest } from "./rpc_new_candle_stream";

export const protobufPackage = "market";

export const MARKET_PACKAGE_NAME = "market";

export interface MarketClient {
  newCandleStream(request: NewCandleStreamRequest): Observable<Candle>;

  getCandles(request: GetCandlesRequest): Observable<GetCandlesResponse>;
}

export interface MarketController {
  newCandleStream(request: NewCandleStreamRequest): Observable<Candle>;

  getCandles(
    request: GetCandlesRequest,
  ): Promise<GetCandlesResponse> | Observable<GetCandlesResponse> | GetCandlesResponse;
}

export function MarketControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["newCandleStream", "getCandles"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("Market", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("Market", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const MARKET_SERVICE_NAME = "Market";
